#!/bin/bash
# PaiNaiDee 3D Map - Deployment Helper Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ Deploy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PaiNaiDee 3D Map

set -e

# Colors for output / ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions / ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
print_header() {
    echo -e "${BLUE}üó∫Ô∏è  PaiNaiDee 3D Map Deployment Helper${NC}"
    echo -e "${BLUE}=====================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Check prerequisites / ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
check_prerequisites() {
    print_info "Checking prerequisites... / ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô..."
    
    # Check Node.js
    if command -v node >/dev/null 2>&1; then
        NODE_VERSION=$(node --version)
        print_success "Node.js found: $NODE_VERSION"
    else
        print_error "Node.js not found. Please install Node.js 16+ / ‡πÑ‡∏°‡πà‡∏û‡∏ö Node.js ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js 16+"
        exit 1
    fi
    
    # Check npm
    if command -v npm >/dev/null 2>&1; then
        NPM_VERSION=$(npm --version)
        print_success "npm found: $NPM_VERSION"
    else
        print_error "npm not found / ‡πÑ‡∏°‡πà‡∏û‡∏ö npm"
        exit 1
    fi
    
    # Check if package.json exists
    if [ -f "package.json" ]; then
        print_success "package.json found / ‡∏û‡∏ö package.json"
    else
        print_error "package.json not found / ‡πÑ‡∏°‡πà‡∏û‡∏ö package.json"
        exit 1
    fi
}

# Install dependencies / ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
install_dependencies() {
    print_info "Installing dependencies... / ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies..."
    npm install
    print_success "Dependencies installed / ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÅ‡∏•‡πâ‡∏ß"
}

# Build project / ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
build_project() {
    print_info "Building project... / ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå..."
    npm run build
    print_success "Project built successfully / ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
}

# Validate project / ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
validate_project() {
    print_info "Validating project... / ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå..."
    npm run validate
    print_success "Project validation passed / ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ú‡πà‡∏≤‡∏ô"
}

# Deploy to platform / Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
deploy_to_platform() {
    local platform=$1
    
    case $platform in
        "vercel")
            print_info "Deploying to Vercel... / ‡∏Å‡∏≥‡∏•‡∏±‡∏á Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Vercel..."
            if command -v vercel >/dev/null 2>&1; then
                vercel --prod
                print_success "Deployed to Vercel / Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Vercel ‡πÅ‡∏•‡πâ‡∏ß"
            else
                print_warning "Vercel CLI not found. Install with: npm i -g vercel"
                print_info "‡πÑ‡∏°‡πà‡∏û‡∏ö Vercel CLI ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: npm i -g vercel"
            fi
            ;;
        "netlify")
            print_info "Deploying to Netlify... / ‡∏Å‡∏≥‡∏•‡∏±‡∏á Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Netlify..."
            if command -v netlify >/dev/null 2>&1; then
                netlify deploy --prod
                print_success "Deployed to Netlify / Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Netlify ‡πÅ‡∏•‡πâ‡∏ß"
            else
                print_warning "Netlify CLI not found. Install with: npm i -g netlify-cli"
                print_info "‡πÑ‡∏°‡πà‡∏û‡∏ö Netlify CLI ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: npm i -g netlify-cli"
            fi
            ;;
        "docker")
            print_info "Building Docker image... / ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Docker image..."
            if command -v docker >/dev/null 2>&1; then
                docker build -t painaidee-3d-map .
                print_success "Docker image built / ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker image ‡πÅ‡∏•‡πâ‡∏ß"
                print_info "Run with: docker run -p 80:80 painaidee-3d-map"
                print_info "‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢: docker run -p 80:80 painaidee-3d-map"
            else
                print_error "Docker not found / ‡πÑ‡∏°‡πà‡∏û‡∏ö Docker"
                exit 1
            fi
            ;;
        "github-pages")
            print_info "GitHub Pages deployment is handled by GitHub Actions"
            print_info "‡∏Å‡∏≤‡∏£ Deploy GitHub Pages ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ GitHub Actions"
            print_info "Push to main branch to trigger deployment"
            print_info "Push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á main branch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ deployment"
            ;;
        *)
            print_error "Unknown platform: $platform"
            print_error "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å: $platform"
            print_info "Available platforms: vercel, netlify, docker, github-pages"
            print_info "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ: vercel, netlify, docker, github-pages"
            exit 1
            ;;
    esac
}

# Show help / ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
show_help() {
    echo "Usage: $0 [COMMAND] [PLATFORM]"
    echo "       ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: $0 [‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á] [‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°]"
    echo
    echo "Commands / ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:"
    echo "  install     Install dependencies / ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"
    echo "  build       Build project / ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"
    echo "  validate    Validate project / ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"
    echo "  deploy      Deploy to platform / Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°"
    echo "  full        Full deployment (install + build + validate + deploy)"
    echo "              ‡∏Å‡∏≤‡∏£ deploy ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á + ‡∏™‡∏£‡πâ‡∏≤‡∏á + ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö + deploy)"
    echo
    echo "Platforms / ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°:"
    echo "  vercel       Deploy to Vercel"
    echo "  netlify      Deploy to Netlify"
    echo "  docker       Build Docker image"
    echo "  github-pages Deploy to GitHub Pages (via GitHub Actions)"
    echo
    echo "Examples / ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:"
    echo "  $0 install"
    echo "  $0 build"
    echo "  $0 deploy vercel"
    echo "  $0 full docker"
}

# Main script / ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
main() {
    print_header
    
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    local command=$1
    local platform=$2
    
    case $command in
        "install")
            check_prerequisites
            install_dependencies
            ;;
        "build")
            check_prerequisites
            build_project
            ;;
        "validate")
            check_prerequisites
            validate_project
            ;;
        "deploy")
            if [ -z "$platform" ]; then
                print_error "Platform required for deploy command"
                print_error "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á deploy"
                show_help
                exit 1
            fi
            check_prerequisites
            deploy_to_platform "$platform"
            ;;
        "full")
            if [ -z "$platform" ]; then
                print_error "Platform required for full deployment"
                print_error "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ deploy ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°"
                show_help
                exit 1
            fi
            check_prerequisites
            install_dependencies
            build_project
            validate_project
            deploy_to_platform "$platform"
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            print_error "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å: $command"
            show_help
            exit 1
            ;;
    esac
    
    print_success "Operation completed successfully! / ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
}

# Run main function / ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
main "$@"
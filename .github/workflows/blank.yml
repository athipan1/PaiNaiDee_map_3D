# PaiNaiDee 3D Map CI/CD Pipeline

name: Build and Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains jobs for validation and deployment
  validate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Install dependencies using lock file for consistent builds
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies using package-lock.json..."
          npm ci
          echo "✅ Dependencies installed successfully"

      # Validate dependency lock file
      - name: Validate dependency lock file
        run: |
          echo "🔒 Validating package-lock.json..."
          if [ -f "package-lock.json" ]; then
            echo "✅ package-lock.json found"
            # Verify lock file is valid JSON and has required structure
            node -e "
              const fs = require('fs');
              const lockfile = JSON.parse(fs.readFileSync('package-lock.json', 'utf8'));
              if (!lockfile.lockfileVersion) throw new Error('Invalid lockfile: missing lockfileVersion');
              if (!lockfile.packages) throw new Error('Invalid lockfile: missing packages');
              console.log('✅ package-lock.json structure is valid');
              console.log('🔹 Lockfile version:', lockfile.lockfileVersion);
            "
            # Verify dependencies are in sync
            npm ls > /dev/null && echo "✅ Dependencies are in sync with lock file" || echo "⚠️ Dependencies may need sync"
          else
            echo "❌ package-lock.json not found"
            exit 1
          fi

      # Validate HTML structure
      - name: Validate HTML
        run: |
          echo "🔍 Validating HTML structure..."
          # Check if index.html exists and has basic structure
          if [ -f "index.html" ]; then
            echo "✅ index.html found"
            grep -q "<!DOCTYPE html>" index.html && echo "✅ HTML5 DOCTYPE found" || exit 1
            grep -q "<title>" index.html && echo "✅ Title tag found" || exit 1
            echo "✅ HTML validation passed"
          else
            echo "❌ index.html not found"
            exit 1
          fi

      # Validate JavaScript syntax (Using npm scripts)
      - name: Validate JavaScript
        run: |
          echo "🔍 Validating JavaScript files using npm scripts..."
          npm run validate:js
          echo "✅ JavaScript validation completed successfully"

      # Check CSS files (Robust version)
      - name: Validate CSS
        run: |
          echo "🔍 Checking CSS files..."
          # Check for styles.css in common locations
          if [ -f "src/assets/css/styles.css" ]; then
            echo "✅ styles.css found in src/assets/css/"
            [ -s "src/assets/css/styles.css" ] && echo "✅ CSS file is not empty" || exit 1
          elif [ -f "styles.css" ]; then
            echo "✅ styles.css found in root"
            [ -s "styles.css" ] && echo "✅ CSS file is not empty" || exit 1
          else
            echo "❌ styles.css not found in common locations."
            exit 1
          fi

      # Test application startup
      - name: Test Application Startup
        run: |
          echo "🚀 Testing application startup..."
          
          # Find an available port starting from 8080
          PORT=8080
          while netstat -tuln 2>/dev/null | grep -q ":$PORT " && [ $PORT -lt 8090 ]; do
            PORT=$((PORT + 1))
          done
          echo "📡 Using port: $PORT"
          
          # Start a simple HTTP server in background
          python3 -m http.server $PORT > server.log 2>&1 &
          SERVER_PID=$!
          echo "🔧 Server started with PID: $SERVER_PID"
          
          # Wait for server to start and verify it's running
          sleep 3
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "❌ Server failed to start"
            cat server.log
            exit 1
          fi
          
          # Test if the application loads
          echo "🔍 Testing application response..."
          RESPONSE=$(curl -s "http://localhost:$PORT" 2>/dev/null)
          if echo "$RESPONSE" | grep -q "PaiNaiDee 3D Map"; then
            echo "✅ Application loads successfully"
            TEST_RESULT=0
          else
            echo "❌ Application failed to load properly"
            echo "Response preview:"
            echo "$RESPONSE" | head -10
            TEST_RESULT=1
          fi
          
          # Clean up
          echo "🧹 Cleaning up..."
          kill $SERVER_PID 2>/dev/null
          wait $SERVER_PID 2>/dev/null || true
          rm -f server.log
          
          echo "✅ Application startup test completed"
          exit $TEST_RESULT

  # Deploy job (can be extended for actual deployment)
  deploy:
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      # Set up Node.js environment for deployment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Install dependencies for deployment
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies for deployment..."
          npm ci
          echo "✅ Dependencies ready for deployment"
      
      - name: Deploy Ready
        run: |
          echo "🚀 Application is ready for deployment!"
          echo "📊 Project Statistics:"
          echo "   - HTML files: $(find . -name "*.html" | wc -l)"
          echo "   - CSS files: $(find . -name "*.css" | wc -l)"
          echo "   - JS files: $(find . -name "*.js" | wc -l)"
          echo "✅ All checks passed - Ready to deploy PaiNaiDee 3D Map!"
